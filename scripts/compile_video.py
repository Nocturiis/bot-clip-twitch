import subprocess
import os
import json
import sys

INPUT_PATHS_JSON = os.path.join("data", "downloaded_clip_paths.json")
OUTPUT_VIDEO_PATH = os.path.join("data", "compiled_video.mp4")
CLIPS_LIST_TXT = os.path.join("data", "clips_list.txt")

def compile_video():
    print("üé¨ Compilation des clips vid√©o...")
    
    if not os.path.exists(INPUT_PATHS_JSON):
        print(f"‚ùå Fichier des chemins de clips t√©l√©charg√©s '{INPUT_PATHS_JSON}' introuvable.")
        sys.exit(1)

    with open(INPUT_PATHS_JSON, "r") as f:
        downloaded_clip_paths = json.load(f)

    if not downloaded_clip_paths:
        print("‚ö†Ô∏è Aucune vid√©o t√©l√©charg√©e √† compiler. La liste des chemins est vide. Fin de l'√©tape de compilation.")
        sys.exit(0)

    # Cr√©er le fichier texte pour FFmpeg
    # Le chemin dans le fichier doit √™tre relatif au r√©pertoire de travail de FFmpeg,
    # qui est la racine du d√©p√¥t ("/home/runner/work/bot-clip-twitch/bot-clip-twitch/")
    with open(CLIPS_LIST_TXT, "w") as f:
        for path in downloaded_clip_paths:
            # Assurez-vous que le chemin est correct.
            # Il devrait d√©j√† √™tre "data/raw_clips/clip_..."
            # Nous allons explicitement nous assurer qu'il n'y a qu'une seule instance de "data/" au d√©but
            
            # M√©thode plus robuste pour garantir le bon chemin relatif
            # On prend la partie du chemin apr√®s "data/" (s'il y a un "data/" au d√©but)
            # Puis on la reconstitue avec un seul "data/"
            
            # Initialement, les chemins sont par exemple : "data/raw_clips/clip_1_ID.mp4"
            # Si pour une raison inconnue ils devenaient "/home/runner/work/.../data/raw_clips/...",
            # ou "data/data/raw_clips/...", cette logique les normaliserait.
            
            if path.startswith("data/raw_clips/"):
                cleaned_path = path # Le chemin est d√©j√† correct
            elif path.startswith("raw_clips/"): # Si pour une raison l'√©tape de DL omet "data/"
                cleaned_path = os.path.join("data", path)
            elif "data/data/raw_clips/" in path: # Cas de l'erreur persistante
                cleaned_path = path.replace("data/data/raw_clips/", "data/raw_clips/")
            else:
                cleaned_path = path # Garde le chemin tel quel si non reconnu
            
            # Pour √™tre absolument certain, on peut aussi reconstruire le chemin depuis la racine si n√©cessaire.
            # Mais les chemins sont d√©j√† relatifs √† la racine.
            
            f.write(f"file '{cleaned_path}'\n")

    command = [
        "ffmpeg",
        "-f", "concat",
        "-safe", "0",
        "-i", CLIPS_LIST_TXT,
        "-c", "copy",
        OUTPUT_VIDEO_PATH
    ]
    
    print(f"Ex√©cution de la commande FFmpeg: {' '.join(command)}")

    try:
        subprocess.run(command, check=True)
        print(f"‚úÖ Vid√©o compil√©e avec succ√®s : {OUTPUT_VIDEO_PATH}")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de la compilation vid√©o : {e}")
        if e.stderr:
            print(f"FFmpeg STDERR: {e.stderr.decode()}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Erreur inattendue lors de la compilation vid√©o : {e}")
        sys.exit(1)

if __name__ == "__main__":
    compile_video()